
# --- ProcessExcel.ps1 ---
# Finds newest Excel/CSV file in Downloads, copies it as "New File - mm-dd-yyyy (...)", 
# reorders columns, applies formula, converts to values, and saves cleanly.

Write-Host "üöÄ Starting Excel automation..." -ForegroundColor Cyan

# Automatically detect the user's Downloads folder
$Downloads = [Environment]::GetFolderPath('UserProfile') + '\Downloads'
$sourceDir = $Downloads
$destDir   = Join-Path $Downloads 'Bob'

# Ensure destination folder exists
if (!(Test-Path $destDir)) {
    New-Item -ItemType Directory -Path $destDir | Out-Null
    Write-Host "Created folder: $destDir"
}

# Find newest Excel/CSV file
$file = Get-ChildItem "$sourceDir\*" -File |
    Where-Object { $_.Extension -in '.xlsx', '.xls', '.csv' } |
    Sort-Object LastWriteTime -Descending |
    Select-Object -First 1

if (-not $file) {
    Write-Host "‚ùå No Excel or CSV file found in $sourceDir" -ForegroundColor Red
    Pause
    exit
}

Write-Host "Found file: $($file.Name)" -ForegroundColor Yellow

# --- Build new name pattern: "New File - mm-dd-yyyy" with incremental counter ---
$today = Get-Date -Format "MM-dd-yyyy"
$baseName = "New File - $today"
$ext = ".xlsx"  # Always save as Excel workbook

# Determine next available filename (stacking allowed)
$counter = 0
$newFile = Join-Path $destDir "$baseName$ext"
while (Test-Path $newFile) {
    $counter++
    $newFile = Join-Path $destDir "$baseName ($counter)$ext"
}

# Copy original file to new name
Copy-Item $file.FullName $newFile -Force
Write-Host "Copied and renamed to: $newFile" -ForegroundColor Green

try {
    # Start Excel
    $excel = New-Object -ComObject Excel.Application
    $excel.Visible = $false
    $excel.DisplayAlerts = $false
    $excel.AskToUpdateLinks = $false
    $workbook = $excel.Workbooks.Open($newFile)
    $sheet = $workbook.Sheets.Item(1)

    # --- Reorder columns by header name ---
    $desiredOrder = @("dog","cat","bird","age","height")
    $headerRow = 1
    $usedRange = $sheet.UsedRange
    $colCount = $usedRange.Columns.Count

    $colMap = @{}
    for ($i = 1; $i -le $colCount; $i++) {
        $header = ($sheet.Cells.Item($headerRow, $i).Text).Trim().ToLower()
        if ($desiredOrder -contains $header) {
            $colMap[$header] = $i
        }
    }

    Write-Host "Found headers:" ($colMap.Keys -join ", ") -ForegroundColor Yellow

    $orderedIndex = 1
    foreach ($name in $desiredOrder) {
        if ($colMap.ContainsKey($name)) {
            $srcCol = $colMap[$name]
            if ($srcCol -ne $orderedIndex) {
                $sheet.Columns($srcCol).Cut()
                $sheet.Columns($orderedIndex).Insert()
            }
            $orderedIndex++
        }
    }

    # --- Apply formula then hard-code values ---
    $lastRow = $sheet.UsedRange.Rows.Count
    if ($lastRow -lt 2) {
        Write-Host "‚ö†Ô∏è Not enough data rows to apply formula." -ForegroundColor Yellow
    } else {
        $range = $sheet.Range("E2:E$lastRow")
        $formula = '= "on " & TEXT(RC[-4], "mm/dd/yyyy hh:mm:ss") & " we had " & TEXT(RC[-3]+RC[-2], "#.##") & " for attendees"'
        $range.FormulaR1C1 = $formula
        $range.Value2 = $range.Value2  # hard-code results
    }

    # Save after all processing
    $workbook.Save()
    $workbook.Close()
    $excel.Quit()

    # Release COM objects
    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($sheet) | Out-Null
    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($workbook) | Out-Null
    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel) | Out-Null

    Write-Host "‚úÖ Done! Processed and saved as $newFile" -ForegroundColor Green
}
catch {
    Write-Host "‚ö†Ô∏è Error: $($_.Exception.Message)" -ForegroundColor Red
}
finally {
    Pause
}















import os
import sys
import time
import datetime
import tkinter as tk
from tkinter import simpledialog, messagebox

from PIL import Image
import mss

# --- Make the process DPI aware so window coords match screen pixels (Windows) ---
if sys.pla



tform.startswith("win"):
    try:
        import ctypes
        ctypes.windll.user32.SetProcessDPIAware()
    except Exception:
        pass

SAVE_DIR = r"C:\Files"  # Change if desired


class OverlayApp:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("Screen Overlay")
        self.root.attributes("-topmost", True)

        # Whole-window transparency (widgets themselves can't be translucent)
        self.alpha = 0.35
        self._set_alpha(self.alpha)

        # Default window size/pos
        self.root.geometry("800x450+100+100")

        # Ensure output folder exists
        os.makedirs(SAVE_DIR, exist_ok=True)

        # Default base name (used when not prompting)
        self.base_name = datetime.datetime.now().strftime("capture_%Y%m%d_%H%M%S")

        # UI
        self._build_ui()

        # Key bindings
        self.root.bind("<space>", self._ask_name_popup)          # Space ‚Üí set base name (no save)
        # Hotkeys without prompt (use current base_name)
        self.root.bind("<Control-1>", lambda e: self.save_with_suffix("A", prompt=False))
        self.root.bind("<Control-2>", lambda e: self.save_with_suffix("B", prompt=False))
        self.root.bind("<Control-3>", lambda e: self.save_with_suffix("C", prompt=False))
        self.root.bind("<Control-4>", lambda e: self.save_with_suffix("D", prompt=False))
        self.root.bind("<Control-5>", lambda e: self.save_with_suffix("E", prompt=False))

        # Mouse wheel to adjust opacity
        self.root.bind("<MouseWheel>", self._on_wheel)           # Windows
        self.root.bind("<Button-4>", lambda e: self._adjust_alpha(+0.05))  # Linux up
        self.root.bind("<Button-5>", lambda e: self._adjust_alpha(-0.05))  # Linux down

        self._update_title()

    # ---------- UI ----------
    def _build_ui(self):
        # Toolbar
        toolbar = tk.Frame(self.root, bg="#222", padx=6, pady=6)
        toolbar.pack(side="top", anchor="nw", fill="x")

        def mkbtn(label):
            # Clicking A‚ÄìE prompts for a name (great for paste), then saves with that suffix
            return tk.Button(toolbar, text=label, width=4,
                             command=lambda s=label: self.save_with_suffix(s, prompt=True))

        for lab in ["A", "B", "C", "D", "E"]:
            mkbtn(lab).pack(side="left", padx=4)

        tk.Label(toolbar, text="  |  ", bg="#222", fg="#ccc").pack(side="left")

        tk.Button(toolbar, text="Set Name (Space)",
                  command=self._ask_name_popup).pack(side="left", padx=4)

        tk.Button(toolbar, text="Capture Now (A, no prompt)",
                  command=lambda: self.save_with_suffix("A", prompt=False)).pack(side="left", padx=4)

        tk.Button(toolbar, text="Quit", command=self.root.destroy).pack(side="left", padx=4)

        # Status bar
        status = tk.Frame(self.root, bg="#111")
        status.pack(side="bottom", fill="x")
        self.status_var = tk.StringVar(value=f"Saving to {SAVE_DIR}")
        tk.Label(status, textvariable=self.status_var, bg="#111", fg="#ddd", anchor="w").pack(
            side="left", padx=8, pady=4
        )

        # Canvas (use a safe background; empty string may error on some builds)
        self.canvas = tk.Canvas(self.root, highlightthickness=0, bg=self.root["bg"])
        self.canvas.pack(fill="both", expand=True)
        self.canvas.bind("<Configure>", self._draw_outline)

    def _draw_outline(self, _=None):
        self.canvas.delete("all")
        w = self.root.winfo_width()
        h = self.root.winfo_height()
        m = 3
        self.canvas.create_rectangle(m, m, w - m, h - m, outline="#00ffff", width=2)
        self.canvas.create_text(
            10, 10, anchor="nw",
            text="Resize to set capture area.\nMouse wheel: opacity.\nSpace: set base name.\nButtons A‚ÄìE: prompt + save.",
            fill="#00ffff"
        )

    # ---------- Transparency ----------
    def _on_wheel(self, e):
        self._adjust_alpha(+0.05 if e.delta > 0 else -0.05)

    def _adjust_alpha(self, delta):
        self.alpha = max(0.05, min(0.95, self.alpha + delta))
        self._set_alpha(self.alpha)
        self.status_var.set(f"Opacity: {int(self.alpha*100)}%   |   Saving to {SAVE_DIR}")

    def _set_alpha(self, a):
        try:
            self.root.attributes("-alpha", a)
        except tk.TclError:
            pass

    # ---------- Naming helpers ----------
    def _get_clipboard_text(self) -> str:
        try:
            return self.root.clipboard_get()
        except Exception:
            return ""

    def _prompt_and_set_base(self, title="Base File Name") -> bool:
        # Prefill with clipboard (ideal for paste), else current base name
        default = self._get_clipboard_text().strip() or self.base_name
        name = simpledialog.askstring(
            title, "Paste or type the base name:", initialvalue=default, parent=self.root
        )
        if not name:
            return False  # cancelled
        safe = "".join(c for c in name if c not in r'\/:*?"<>|').strip()
        if not safe:
            messagebox.showwarning("Invalid name", "Name cannot be empty after removing invalid characters.")
            return False
        self.base_name = safe
        self._update_title()
        return True

    def _ask_name_popup(self, _=None):
        self._prompt_and_set_base("Base File Name")

    def _update_title(self):
        self.root.title(f"Screen Overlay ‚Äî Base name: {self.base_name}")

    # ---------- Capture ----------
    def save_with_suffix(self, suffix: str, prompt: bool = False):
        # Optionally prompt for a fresh base (paste-friendly)
        if prompt:
            if not self._prompt_and_set_base(title=f"Save as ‚Ä¶ -{suffix}"):
                return  # user cancelled

        # Compute geometry BEFORE hiding
        x1 = self.root.winfo_rootx()
        y1 = self.root.winfo_rooty()
        w = self.root.winfo_width()
        h = self.root.winfo_height()

        # Build unique output path
        fname = f"{self.base_name}-{suffix}.png"
        out_path = os.path.join(SAVE_DIR, fname)
        base_no_ext, ext = os.path.splitext(out_path)
        n = 1
        while os.path.exists(out_path):
            out_path = f"{base_no_ext} ({n}){ext}"
            n += 1

        # Hide overlay so it never appears in the capture
        self.root.withdraw()
        self.root.update_idletasks()
        time.sleep(0.15)  # small delay so compositor removes the window

        ok = False
        try:
            # Dual-monitor friendly absolute region (left/top may be negative)
            region = {"left": int(x1), "top": int(y1), "width": int(w), "height": int(h)}
            with mss.mss() as sct:
                raw = sct.grab(region)
                # Convert BGRA ‚Üí RGB for Pillow
                img = Image.frombytes("RGB", raw.size, raw.bgra, "raw", "BGRX")
                img.save(out_path)
                ok = True
        except Exception as e:
            messagebox.showerror("Capture failed", f"Could not save screenshot:\n{e}")
        finally:
            # Restore overlay
            self.root.deiconify()
            self.root.lift()
            self.root.attributes("-topmost", True)

        if ok:
            self.status_var.set(f"Saved: {out_path}")
            self._flash_outline()

    def _flash_outline(self):
        try:
            for _ in range(2):
                for item in self.canvas.find_all():
                    self.canvas.itemconfig(item, outline="#ffffff")
                self.root.update()
                time.sleep(0.05)
                for item in self.canvas.find_all():
                    self.canvas.itemconfig(item, outline="#00ffff")
                self.root.update()
                time.sleep(0.05)
        except Exception:
            pass


def main():
    root = tk.Tk()
    app = OverlayApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
