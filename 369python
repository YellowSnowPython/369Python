# 222tpd_field_checker_step4.py

import os
import pandas as pd
from datetime import datetime

# ---------------------------
# Configuration
# ---------------------------
RUN_CSV_PATH    = r"C:\Input\Run.csv"
FILES_DIRECTORY = r"C:\Files\Located"
OUTPUT_DIRECTORY = r"C:\Files\Located\Output"
DATE_SUFFIX     = datetime.now().strftime("%Y-%m-%d")

# ---------------------------
# Step 1: Read Run.csv
# ---------------------------
def read_run_csv(path):
    """
    Reads Run.csv without assuming a header. Returns DataFrame or None.
    """
    try:
        df = pd.read_csv(path, header=None, low_memory=False)
        print(f"Loaded Run.csv: {df.shape[0]} rows Ã— {df.shape[1]} cols")
        return df
    except Exception as e:
        print(f"Error reading {path}: {e}")
        return None

# ---------------------------
# Step 2: Parse Run.csv
# ---------------------------
def parse_run_df(df):
    """
    Extracts:
      - tpd_fields: list of field names from column B (rows 2+)
      - file_map: dict mapping header name (D1+) to actual filename (D2+);
        if filename cell is blank, fallback to header name (with .csv extension if missing)
      - field_mapping: DataFrame mapping tpd_fields to CSV column names (from rows 2+, cols D+)
    """
    # TPD fields from column B (index 1), rows 2+ (iloc[1:,1])
    tpd_fields = df.iloc[1:, 1].dropna().astype(str).tolist()
    print(f"TPD fields ({len(tpd_fields)}): {tpd_fields}")

    # Headers from row 1 (D1+) and filenames from row 2 (D2+)
    headers = df.iloc[0, 3:].astype(str).tolist()
    filenames = df.iloc[1, 3:].astype(str).tolist()

    # Build file_map with fallback: header if filename empty or 'nan'
    file_map = {}
    for hdr, fn in zip(headers, filenames):
        fn_clean = fn.strip() if isinstance(fn, str) else ''
        if not fn_clean or fn_clean.lower() == 'nan':
            # fallback to header name
            fn_clean = hdr if hdr.lower().endswith('.csv') else f"{hdr}.csv"
        file_map[hdr] = fn_clean
    print(f"File map ({len(file_map)}): {file_map}")

    # Build field mapping from rows 2+ and cols D+
    mapping_df = df.iloc[1:1+len(tpd_fields), 3:3+len(headers)].copy()
    mapping_df.columns = headers
    mapping_df.index = tpd_fields
    print("Field mapping sample:")
    print(mapping_df.head())

    return tpd_fields, file_map, mapping_df

