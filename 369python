import os, time, sys, datetime, tkinter as tk
from tkinter import simpledialog, messagebox
from PIL import Image
import mss

# --- Make DPI aware on Windows so coords match pixels ---
if sys.platform.startswith("win"):
    try:
        import ctypes
        ctypes.windll.user32.SetProcessDPIAware()
    except Exception:
        pass

SAVE_DIR = r"C:\Files"

class OverlayApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Screen Overlay")
        self.root.attributes("-topmost", True)

        # Window transparency (whole window). Widgets can't be individually translucent.
        self.alpha = 0.35
        self.set_alpha(self.alpha)

        # Default size/position
        self.root.geometry("800x450+100+100")

        # Ensure save dir
        os.makedirs(SAVE_DIR, exist_ok=True)

        # Default base name
        self.base_name = datetime.datetime.now().strftime("capture_%Y%m%d_%H%M%S")

        # Build UI
        self.build_ui()

        # Key bindings
        self.root.bind("<space>", self.ask_name_popup)      # Space → set base name
        self.root.bind("<Control-1>", lambda e: self.save_with_suffix("A"))
        self.root.bind("<Control-2>", lambda e: self.save_with_suffix("B"))
        self.root.bind("<Control-3>", lambda e: self.save_with_suffix("C"))
        self.root.bind("<Control-4>", lambda e: self.save_with_suffix("D"))
        self.root.bind("<Control-5>", lambda e: self.save_with_suffix("E"))

        # Mouse wheel to adjust overall transparency
        self.root.bind("<MouseWheel>", self.on_wheel)       # Windows
        self.root.bind("<Button-4>", lambda e: self.adjust_alpha(+0.05))  # Linux up
        self.root.bind("<Button-5>", lambda e: self.adjust_alpha(-0.05))  # Linux down

        self.update_title()

    def build_ui(self):
        # Toolbar
        toolbar = tk.Frame(self.root, bg="#222", padx=6, pady=6)
        toolbar.pack(side="top", anchor="nw", fill="x")

        def mkbtn(label):
            return tk.Button(toolbar, text=label, width=4, command=lambda s=label: self.save_with_suffix(s))

        for lab in ["A", "B", "C", "D", "E"]:
            mkbtn(lab).pack(side="left", padx=4)

        tk.Label(toolbar, text="  |  ", bg="#222", fg="#ccc").pack(side="left")
        tk.Button(toolbar, text="Set Name (Space)", command=self.ask_name_popup).pack(side="left", padx=4)
        tk.Button(toolbar, text="Capture Now (A)", command=lambda: self.save_with_suffix("A")).pack(side="left", padx=4)
        tk.Button(toolbar, text="Quit", command=self.root.destroy).pack(side="left", padx=4)

        # Status
        status = tk.Frame(self.root, bg="#111")
        status.pack(side="bottom", fill="x")
        self.status_var = tk.StringVar(value=f"Saving to {SAVE_DIR}")
        tk.Label(status, textvariable=self.status_var, bg="#111", fg="#ddd", anchor="w").pack(
            side="left", padx=8, pady=4
        )

        # Canvas: use a safe bg (empty string can error on some builds)
        self.canvas = tk.Canvas(self.root, highlightthickness=0, bg=self.root["bg"])
        self.canvas.pack(fill="both", expand=True)
        self.canvas.bind("<Configure>", self.draw_outline)

    def draw_outline(self, _=None):
        self.canvas.delete("all")
        w = self.root.winfo_width()
        h = self.root.winfo_height()
        m = 3
        self.canvas.create_rectangle(m, m, w - m, h - m, outline="#00ffff", width=2)
        self.canvas.create_text(
            10, 10, anchor="nw",
            text="Resize window to set capture area.\nMouse wheel: opacity.\nSpace: set base name.",
            fill="#00ffff"
        )

    def on_wheel(self, e):
        self.adjust_alpha(+0.05 if e.delta > 0 else -0.05)

    def adjust_alpha(self, delta):
        self.alpha = max(0.05, min(0.95, self.alpha + delta))
        self.set_alpha(self.alpha)
        self.status_var.set(f"Opacity: {int(self.alpha*100)}%   |   Saving to {SAVE_DIR}")

    def set_alpha(self, a):
        try:
            self.root.attributes("-alpha", a)
        except tk.TclError:
            pass

    def ask_name_popup(self, _=None):
        name = simpledialog.askstring(
            "Base File Name",
            "Enter a base name:",
            initialvalue=self.base_name,
            parent=self.root
        )
        if name:
            safe = "".join(c for c in name if c not in r'\/:*?"<>|').strip()
            self.base_name = safe or "capture"
            self.update_title()

    def update_title(self):
        self.root.title(f"Screen Overlay — Base name: {self.base_name}")

    def save_with_suffix(self, suffix: str):
        # Compute geometry BEFORE hiding
        x1 = self.root.winfo_rootx()
        y1 = self.root.winfo_rooty()
        w = self.root.winfo_width()
        h = self.root.winfo_height()

        # Build path with de-dupe
        fname = f"{self.base_name}-{suffix}.png"
        out_path = os.path.join(SAVE_DIR, fname)
        base_no_ext, ext = os.path.splitext(out_path)
        n = 1
        while os.path.exists(out_path):
            out_path = f"{base_no_ext} ({n}){ext}"
            n += 1

        # Hide overlay so it never appears in the capture
        self.root.withdraw()
        self.root.update_idletasks()
        time.sleep(0.15)  # tiny delay so the compositor has time to remove the window

        ok = False
        try:
            with mss.mss() as sct:
                region = {"left": int(x1), "top": int(y1), "width": int(w), "height": int(h)}
                raw = sct.grab(region)
                # Convert to PIL Image (BGRA → RGB)
                img = Image.frombytes("RGB", raw.size, raw.bgra, "raw", "BGRX")
                img.save(out_path)
                ok = True
        except Exception as e:
            messagebox.showerror("Capture failed", f"Could not save screenshot:\n{e}")
        finally:
            # Restore overlay
            self.root.deiconify()
            self.root.lift()
            self.root.attributes("-topmost", True)

        if ok:
            self.status_var.set(f"Saved: {out_path}")
            self.flash_outline()

    def flash_outline(self):
        try:
            for _ in range(2):
                for item in self.canvas.find_all():
                    self.canvas.itemconfig(item, outline="#ffffff")
                self.root.update()
                time.sleep(0.05)
                for item in self.canvas.find_all():
                    self.canvas.itemconfig(item, outline="#00ffff")
                self.root.update()
                time.sleep(0.05)
        except Exception:
            pass


def main():
    root = tk.Tk()
    app = OverlayApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
