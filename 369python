import os
import datetime
import pandas as pd

# you’ll need: pip install pandas xlsxwriter pywin32
import xlsxwriter
import win32com.client as win32

# ---- CONFIGURATION ----
OUTPUT_DIR       = r"C:\Files\Located\Output"
SUMMARY_DIR      = r"C:\Final File"
SUMMARY_FILENAME = "Summary File.xlsx"
SUMMARY_PATH     = os.path.join(SUMMARY_DIR, SUMMARY_FILENAME)

TO_ADDRESSES = ["xxx@example.com", "yyy@example.com", "zzz@example.com"]
CC_ADDRESSES = ["aaa@example.com", "bbb@example.com", "ccc@example.com"]

# ---- 1) COLLECT ALL CSVs INTO ONE DATAFRAME ----
# find all CSV files
csv_files = sorted(f for f in os.listdir(OUTPUT_DIR) if f.lower().endswith(".csv"))
if not csv_files:
    raise RuntimeError(f"No CSV files found in {OUTPUT_DIR}")

# read the first file to capture columns A, B, C as the “index”
first_df = pd.read_csv(os.path.join(OUTPUT_DIR, csv_files[0]), dtype=str)
index_cols = first_df.columns.tolist()[:3]  # e.g. ["Category","TPD Field Name","Extra"]

# start summary with those three columns
summary_df = first_df[index_cols].copy()

# then add each file’s “Status” into its own column
for fname in csv_files:
    df = pd.read_csv(os.path.join(OUTPUT_DIR, fname), dtype=str)
    summary_df[fname] = df["Status"]

# ---- 2) WRITE OUT EXCEL WITH FORMATTING ----
os.makedirs(SUMMARY_DIR, exist_ok=True)
with pd.ExcelWriter(SUMMARY_PATH, engine="xlsxwriter") as writer:
    summary_df.to_excel(writer, index=False, sheet_name="Summary")
    wb  = writer.book
    ws  = writer.sheets["Summary"]

    # formats
    red_fmt    = wb.add_format({"bg_color": "#FFC7CE"})
    yellow_fmt = wb.add_format({"bg_color": "#FFEB9C"})
    green_fmt  = wb.add_format({"bg_color": "#C6EFCE"})
    blue_hdr   = wb.add_format({"bg_color": "#ADD8E6", "bold": True})

    # header row blue
    ws.set_row(0, None, blue_hdr)

    # apply conditional formatting on each “Status” column
    for col_idx, col_name in enumerate(summary_df.columns):
        if col_name in index_cols:
            continue
        col_letter = xlsxwriter.utility.xl_col_to_name(col_idx)
        cell_range = f"{col_letter}2:{col_letter}{len(summary_df)+1}"

        # Missing → red
        ws.conditional_format(cell_range, {
            "type":     "text",
            "criteria": "containing",
            "value":    "Missing",
            "format":   red_fmt
        })
        # Partial → yellow
        ws.conditional_format(cell_range, {
            "type":     "text",
            "criteria": "containing",
            "value":    "Partial",
            "format":   yellow_fmt
        })
        # Included → green
        ws.conditional_format(cell_range, {
            "type":     "text",
            "criteria": "containing",
            "value":    "Included",
            "format":   green_fmt
        })

# ---- 3) BUILD OVERALL STATUS SUMMARY FOR EMAIL ----
summary_status = []
for fname in csv_files:
    stats = summary_df[fname].tolist()
    if any("Missing" in s for s in stats):
        overall = "Missing"
    elif any("Partial" in s for s in stats):
        overall = "Partial"
    else:
        overall = "Included"
    summary_status.append((fname, overall))

# build HTML table with blue header
today_str = datetime.date.today().strftime("%m-%d-%Y")
html_rows = "".join(
    f"<tr><td>{fname}</td><td>{status}</td></tr>"
    for fname, status in summary_status
)
html_table = (
    '<table border="1" cellpadding="5" cellspacing="0" '
    'style="border-collapse:collapse;">'
    '<tr style="background-color:#ADD8E6;">'
    '<th>File Name</th><th>Status</th></tr>'
    f"{html_rows}</table>"
)

# ---- 4) CREATE AND DISPLAY OUTLOOK EMAIL ----
outlook = win32.Dispatch('Outlook.Application')
mail    = outlook.CreateItem(0)
mail.To       = ";".join(TO_ADDRESSES)
mail.CC       = ";".join(CC_ADDRESSES)
mail.Subject  = f"Completed files for {today_str}"
mail.HTMLBody = (
    "<p>Hi Rishi, Team,</p>"
    f"<p>Please see attached completed files for {today_str}.</p>"
    f"{html_table}"
    "<p>Thank-you,<br>Control Management Team</p>"
)

# attach the summary workbook
mail.Attachments.Add(SUMMARY_PATH)

# display for review (change to .Send() to auto-send)
mail.Display()
